*************               Lesson 6: Create .NET solution and API project              **************
-- Check .net runtime and version info
dotnet --info

-- Check .net project templates list
dotnet new -l

-- Create new dotnet solution file
dotnet new sln

-- Create .net webapi project
dotnet new webapi -o <Folder Name>
-o creates output directory

-- Add project to solution file
dotnet sln add <Folder Name>

-- Run project (from inside API project)
dotnet run
-- Creates https an http link
-- Go to link/swagger to see UI for API documentation



*************               Lesson 7: Adding VSCode extensions                        **************
Added extensions for C#, Nuget, and file icons. Also bracket coloring

*************               Lesson 8: .NET 6 Project Changes                          **************
-- Program.cs and Startup.cs files were changed
-- Also WeatherForecast.cs and WeatherForecastController.cs


*************               Lesson 9: Whats in the web API template                   **************
-- Application runs on https://localhost:7210 and http://localhost:5164. This is determined inside the
    /Properties/LaunchSettings.json file. Under profiles.API the data configuration is there.
    To keep things simple it can be better to just run on http.
-- The following command watches code for changes and reloads
dotnet watch run

-- Program.cs class : Any dotnet app will have this file.
    - This always has a Main method, which the dotnet app will look for when it starts, and executes it.
        The code inside the method creates a Kestrel server with basic settings for running the server.
-- Startup.cs Class : configuration initialized here.
    - The ConfigureServices method is often reffered as the Dependency Injection Container. All custom
        or provided sevices will need to be registered here.
    - The Configure method is for middleware for the application. Middle adds layers to our application
        that a clients request may need to pass through before hitting the business logic.
    - Controllers contain the business logic and endpoints for those logic
-- appsettings.json: Stored configurations as json. Development file runs only in  development mode. 



*************               Lesson 10: Create a new C# class for the product        **************
-- A product entity is essential for an E-Commerce Store
-- We store our entities in an /API/Entities folder. Right Click and add a new Product class
-- We need to now add properties of the Product (attributes)
-- Shortcut for creating property is prop + TAB
-- NOTE - Stripe uses long data type for prices



*************               Lesson 11: What is an entity framework                  **************
-- This is a ORM for .NET, similar to Eloquent for Laravel
-- ORMs save us from having to managing connections, writing SQL queries, etc whenever we want
    to interact with the DB
-- DBContext manages connections to the databases. DBSets represents tables in the databases
-- C# LINQ functionality allows for querying the data. The ORM converts to SQL, fetches data
    and converts it to C# objects.
-- Features include Modelling, Querying, Change Tracking, Saving, Optimistic Concurrency,
    Transaction Management, Caching, Built-in Conventions (proprty id of Product class becomes
    PK of products table), Migrations



*************               Lesson 12: Adding the DBContext class                   **************
-- Need to use Nuget gallery. CNTRL+SHFT+P, Open Nuget gallery, find MS entity framework, install
    core.sqlite and core.design. The .csproj File will get updated. Like a composer-lock file.
-- Create a new folder /API/Data. All data related classes go here. Inside here create a StoreContext 
    class. It needs to extend DbContext, which represents a session with a DB. It can be used to 
    query and store instances of entities. Create a constructor with options, which are the DB
    credentials.
-- Now for each entity we need to create a DB set.
public DbSet<Product> Products {get; set;}
-- Now in the Startup.cs class, we need to add the DbContext as a service. Inside ConfigurationServices
    method:
services.AddDbContext<StoreContext>(opt => 
{
    opt.UseSqlite(Configuration.GetConnectionString("DefaultConnection"));
});
-- Now inside our appsettings.development file, we need add the following to the root object
  "ConnectionStrings": {
    "DefaultConnection": "Data source=store.db"
  }
  This is simple for sqlite



*************               Lesson 13: Creating an Entity Framework Migration       **************
-- We need the database file. Currently we have almost enough to create a db with a products table.
-- The tool needed is dotnet-ef. Find site via google, site provides command for installing it.
    The version needs to match your ef version. Run dontent tool update if you need to update the
    version.
    Run "dotnet ef" to check list of commands. There are those for manging database, DbContext, and
    migrations. 
    We need to run "dotnet ef migrations add InitialCreate -o Data/Migrations"
    This should create a migrations folder, with a migration, designer, and snapshot file.
    The Migration file has an up and a down method. The create command already exists.
    Running this code will create a db with the products table.
    Done via "dotnet ef database update" -- creates db if it doesnt exist, runs migrations
    An Ef migrations histroy file is used to keep track of which migrations already ran.
    The SQL queries are shown in the console.
-- Use the command palette to open the sqlite db, which can then be accessed from the explorer window.
    It has the products table, but it is empty


*************               Lesson 14: Seed data into the database                  **************
*************               Lesson 15:                   **************
*************               Lesson 16:                   **************
*************               Lesson 17:                   **************


