*************               Lesson 47: Introduction                    **************
-- Very important concept. Any action that is available for the user needs to have fdbk,
-- This is key to a good user experience
-- If there are server issues, the user needs to be notified
-- For forms, if the user enters incorrect/invalid data, they need to be made aware of this
-- What will be covered?
    - Error handling and exceptions,
    - Developer exception pages,
    - Middleware,
    - Http response errors,
    - Client side error handling,
    - Debugging,

-- When you make an error in your API, you usually get an exception message as well as a stack
    trace that points all of the different layers the lead to the error. 999 times out of 1000, the 
    top level trace and the message are vital to solving the issue at hand.
    - The trace points to the relevant class and line of code.

-- In the Startup.cs class and the Configure method:
app.UseDeveloperExceptionPage();    // Current handles API exceptions

-- Typical Middleware ordering:
    - ExceptionHandler
        - HSTS
            - HttpsReirection
                - Static Files
                    - Routing  
                        - CORS
                            - Authentication
                                -Authorization  => Custom1  => Custom2  => Endpoint

    - Exception handling at the top, needed to catch any exceptions that occur lower down the hierarchy


-- HTTP response:
    - 200 Range         => Ok
    - 300 Range         => Redirection
    - 400 Range         => Client Error (404 - Not found enpoint)
    - 500 Range         => Server Error (e.g. 503 - Server not available, too busy)(500 - Internal error)

-- Client side error handling:
    - Toast notifications
    - Console errors
    - Error pages (Client pages, and Developer view)
    - Validation errors


*************               Lesson 48: Setting up and Error Controller                    **************
-- We need as much info as possible about errors to be able to quickly and succintly resolve it.
-- We need to create a controller to serve Http responses and exceptions
-- We will apply inheritance to apply DRY principle
-- Create class BaseApiController.cs
-- Switch code, now derive from this for ProductsController
-- Create a BuggyController and derive from BaseApiController
-- BuggyController has routes that represent exceptions (GetBadRequest) and returns a instance of
    this exception using the relevant exception class

*************               Lesson 49: Adding exception handling middleware                    **************
-- We will be creating our own middleware for handling exceptions (similar to app.UseDeveloperExceptionPage())
-- Eceptions get passed up the middleware tree until it gets to the exeption handler middleware
-- create a new folder middleware, and a class exception middleware
public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger, IHostEnvironment env)
-- It needs an async InvokeAsync method, and then generate json data
***** Go through Again
-- Register middleware in Startup Class

*************               Lesson 50: Centralizing the axios request                 **************
-- We want to centralize all axios code, making easier to centralize queries.
-- Axios has the ability to intercept requests on the way out/in client
-- Create /app/api/agent.ts file
-- lower cases names for non react component files
-- The file will provide and intermediate interface with axios to allow for easy connections,
    while also making the capabilities much more scalable.
5:37
-- Idea is to create a function to map responses,
-- Then create an object to map http verbs for crud commands while also using the above function
-- Finally, for each feature, create an object mapping all request leveraging the endpoint maps
-- export this and then replace all axios uses

Changes made to this file, agent.ts, Catalog.tsx and ProductDetailsPage.tsx

*************               Lesson 51: React component for error testing                    **************
-- We will use the about page for now
-- Add some buttons that call your dummy buggy api methods
-- Our products controller is not throwing correct errors, not throwing an error at all


Changes made to this file, AboutPage.tsx, ProductsController, ProductDetailsPage


*************               Lesson 52: Using axios intercepters                    **************
-- We will use axios intercepts to act on the error responses from the api
-- Done in agent.ts file
-- We can do something with the error inside the interceptor, but we need to catch the error in our
    component or axios file
<ToastContainer position="bottom-right" hideProgressBar theme="colored" />
import 'react-toastify/dist/ReactToastify.css'; // CSS for toasts
-- We can now use this in our interceptor
-- We can override type safety by adding ! to the end of the expression


*************               Lesson 53: Adding toast notifications                    **************
-- Need to add a toast library to do this
npm i react-toastify
-- Need to add toastContainer just inside our themeProvider, to be able to use it
-- Use axios intercepter in agent.ts file to automatically toast the errors


*************               Lesson 54: Handling validation errors                    **************
-- In our error response, the individuals validation errors are can be found inside an errors array inside the 
    data object
-- It would be more convenient to convert the array of objects into a flat array
-- Also, validation errors are a 400 error, so we need to check inside this block if the errors object is present
-- Use // @ts-ignore above any TS line you want type checking to be disabled for
-- We use a material ui alert to show this


-- Changes made to agent.ts, AboutPage, App.tsx



*************               Lesson 55: Creating a server error component                    **************
-- 500 error gets generated in the API
-- The Contents of the error will be displayed insided the client browser
-- Create a ServerError.tsx under app/errors/
-- Add some basic markup
-- We want to redirect the user on a 500 error occuring. Currently, we can detect 500 errors in our interceptor 
    code inside the agent.ts file
-- The agent.ts is not a react component
-- The AboutPage has access to the history object, which has a method called push that allows pushing a location onto the stack 
-- The agent.ts file is not part of the Route components and has no default access to the history object

-- We will need to change the router provider from BrowserRouter to HistortRouter, as it always to pass the history object, and 
    export it allowing us to import it inside agent.ts.
-- Once done we can go to our agent.ts file and import it, we can now push to /server-error
-- Finally we should add a route for this in App.tsx
-- Now we can pass data to history push method, and use this data via useLocation in our component. We can now render it.
-- Remember that the top of the error stack trace is often the most helpful.

Changes made to this file, Index.tsx, \app\errors\ServerError.tsx; agent.ts, App.tsx, AboutPage


*************               Lesson 56: Creating a not found component                    **************
*************               Lesson 57: Adding a delay & loading indicators -- client                    **************
*************               Lesson 58: Using the dotnet debugging tool                    **************
*************               Lesson 59: Using the react debugger                    **************






