*************               Lesson 20: INTRO				                 **************
*************               Lesson 21: Creating the React App		                 **************
-- Inside ReStore folder run npx create-react-app client --template typescript --use-npm
-- ts.config.json file is needed for compiling TS
-- npm start to build and run the client app

*************               Lesson 22: Whats in the template	 	                 **************
-- public/index.html is the entrypoint for the application. Change the title here.
-- cra tooling adds script imports to the file
-- index.tsx calls ReactDOM.render and renders the base App component in react strict mode
-- React has hot reloading
-- Replace everything with a h1 tag and Restore

*************               Lesson 23: React Component basics		                 **************
-- Very basic stuff -- basic styling
-- Vasic array displaying using .map

*************               Lesson 24: useState Hook			                 **************
-- Basic state manipulations 

*************               Lesson 25: useEffect Hook			                 **************
*************               Lesson 26: API CORS Configurations			                 **************
-- Go to Startup class. Goal is to send back a header with CORS information
-- Service registering
            services.AddCors();

-- Middleware registering
            app.UseCors(opt => {
                opt.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:3000");
            });


*************               Lesson 27: TS vs JS in React			                 **************
-- TS is a superset of JS, hence all normal JS code can run perfectly fine in TS
-- Syntax errors like just naming a property of an object incorrectly gets caught by TS,
    while this shows as a runtime error in JS
    TS shows an error both on the IDE and in the browser. In JS things can fail silently.
    TS can infer from our code what types are being used i.e. the shape of objects.
    Sometimes type safety is not worth the advantage
    It is worth it for Products, as this is a fundemantal entity in our API

*************               Lesson 28: Adding a TS interface for the products          **************
-- This can allow TS to be aware of the shape of our product object
-- This is needed because we will not be setting any default data for TS to infer
-- Inside our source folder create a product.ts file
-- We can use a json to ts converter to get a shape to avoid any typos
-- We can specify a type for useState by passing in an interface or builtin type inside angle brackets
-- The square brackets there indicate that it is an array of that type
useState<Product[]>([]);
-- We do however get an error relating to the add product function since our adding object does not
    match the shape that typescript is expecting.
-- We can mark a property as optional via a ? next to its name in the interface file


*************               Lesson 29: File and Folder organization                  **************
-- Options are seperating code based on features(preffered), or based on files
-- The folder structure should go inside source. Folders:
-- src
    -- app (application wide code)
        -- layout (layout related code)
        -- models (TS types)
    -- features
-- delete app.test.tsx, no testing will be done.
-- dele logo.svg, not being used
-- tsconfig.js handles compilation of TS into ES5. Strict set to true keeps TS checking
-- vscode might show an error but TS compiler might not. TS compiler is more reliable. Just reload vscode.




*************               Lesson 30: Adding react components                     **************
-- React is used due to its ability to create a component hierarchy and the reusability of components.
-- For example we may want to have a card for products.
-- For now our state should be in App, we will connect to the other components via drilling/raising
-- Add features folder under source. Create catalog folder and Catalog.tsx file
-- Use React Fragment
-- We need to be explicit about the type of props
const Catalog = (props: any) => { ...
-- This makes it equivalent to a JS script property with no set type, we can change this type later
-- However we have lost the benefits of TS.
-- To get it back, we should create an interface for Props, and implement it on props.
-- Now props should obey this shape
interface Props {
    products: Product[],
    addProduct: () => void,  // function that returns void
}

const Catalog = (props: Props) => {
-- This is great because we can define required or unrequired props. If we forget to pass anything, we get
    an error
-- Also nice to destructure props



*************               Lesson 31: Adding Material using                       **************
-- Go to material ui and follow installation steps
-- need to run npm i @emotion/react otherwise there will be errors
-- Add roboto font link in index.html file
-- Add images from initial folder to client/public folder 

*************               Lesson 32: Adding Products List and Card               **************
-- Product list updates is very simple, all we have to do is move the <List> and everything inside it, then just make sure that
    the imports are cool and the data is passing through from <Catalog> to <ProductList>
-- ProductCard is also easy, just separate the <ListItem>, sort out imports and data


*************               Lesson 33: Installing and Using React DevTools         **************
-- Install react devtools from chrome add ons
-- Should add Profile and Components tabes to the chrome devtools


*************               Lesson 34: Adding an AppBar                            **************
-- Very Simple, just copy basic elements for AppBar into a /Layout/Header.tsx file
-- Replacing the heading in App.tsx with this.
-- We can also add a <CssBaseline /> componet to remove all default css
-- Put Catalog component inside a Container component, looks nicer



*************               Lesson 35: Add cards for each product                  **************
-- We will use the material UI grid system to layout cards
-- Copy media card example into ProductCard
-- Adjust code accordingly
-- Replace list in ProductList with Grid
-- Spacing is dependent on theming
-- Also place all prodcuts inside a Grid item
-- Remove max width from card
-- Add margin to appbar in Header
-- sx prop for material ui is a shortcut to add custom css


*************               Lesson 36: Styling the product card                    **************
