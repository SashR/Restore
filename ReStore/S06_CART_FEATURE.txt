*************               Lesson 61: Introduction                **************
-- We will be working on both API and Client
-- We will look at storage of the basket (client vs db)
-- Relationships in EF 
-- Shaping data being returned from the API (SELECT statement)
-- Applying React context
-- App Initialization

-- Local storage on browser is not a great option as the server is completely unaware, hence preventing
    many analytics opportunities.
-- Cookies are also an option, they are also persistent on the client, but they get sent as part of every
    request.
-- Final option is storing in the database, but here we need to update both client and server
-- We will not be tracking the individual basket changes

-- Relationships: Each (One) Basket can have (Many) Items; Each Item is a Product (One to One)
-- React Context allows avoiding extreme prop drilling. providing data easily across the depth of a tree.
-- Allows for centralizing some of our state


*************               Lesson 62: Creating the basket entity                **************
-- We are choosing the Database option. Hence we need some tables, and APIs to interact with it.
-- Create new C# class for entity under entities
-- Add properties and helper methods (Add/remove sub entities)
-- Register entity in StoreContext.cs class



*************               Lesson 63: EF Relationships                **************
-- We did not add a seperated DBSet for Basket Items, because we will never query them directly,
    only via their relationship with the Basket.
-- We need to create our migration, stop the API SERVER and execute the following command:
dotnet ef migrations add BasketEntityAdded
-- We can now find new files in our Migrations folder. We can change table names via data annotations later.
-- The migration generated might not match what we want
-- Check the ondelete behavior of the foreign contraints; Cascade or Restrict
-- Restrict will cause child entities to persist even if the parent is deleted.
-- This is not good for relationships where one entity is entirely dependent on the other existing.
-- Some fields may be nullable when they shouldn't be.
-- We should run the below command to remove this shit migration:
dotnet ef migrations remove 

-- Checkup fully defined relationships in the MS docs.
public class Blog
{
    public int BlogId { get; set; }
    public string Url { get; set; }

    public List<Post> Posts { get; set; }
}

public class Post
{
    public int PostId { get; set; }
    public string Title { get; set; }
    public string Content { get; set; }

    public int BlogId { get; set; }             // ********
    public Blog Blog { get; set; }
}
-- The child needs a fully definition i.e. identify foreign key in Parent table
// Fully definitions
public int BasketId {get; set;}
public Basket Basket {get; set; }
-- We can then use data annotations to rename the table
[Table("BasketItems")]
-- We can run our migrations command again, check the migration to make sure all is well
-- We can now restart our server to apply the migration


*************               Lesson 64: Basket Controller                **************
-- API functionality for interacting with the basket
-- initialize context
-- We need 3 endpoints, one for fetching the basket, adding to/ removing from it
-- We will use cookies to identify the basket
[HttpGet]
public async Task<ActionResult<Basket>> GetBasket()
{
    var basket = await _context.Baskets             // Fetch basket
        .Include(i => i.Items)                      // Include the items in the basket
        .ThenInclude(p => p.Product)                // map the items to products
        .FirstOrDefaultAsync(x => x.BuyerId == Request.Cookies["buyerId"]); // use cookie to find it

    if(basket == null) return NotFound();
    return basket;
}


*************               Lesson 65: Add item to basket               **************
-- We need to first fetch the basket, so we can reuse the same function a before, so we extract the method
// Endpoint for adding an item to a basket
[HttpPost] // values will be fetch from query string: api/basket?productId=32&quntity=2
public async Task<ActionResult> AddItemToBasket(int productId, int quantity)
{
    // Find basket if it exists
    var basket = await RetrieveBasket(); // return basket or null (default for any object)
    // Create basket if it doesn't
    if (basket == null) basket = CreateBasket();

    // FInd product using productId
    var product = await _context.Products.FindAsync(productId);
    if (product == null) return NotFound();          // Product does not match, just in case

    // Add item with quantity
    basket.AddItem(product, quantity);
    // Save changes
    var result = await _context.SaveChangesAsync() > 0; // detect if changes occured, commits them

    if (result) return StatusCode(201);

    return BadRequest(new ProblemDetails{Title = "Problem saving item to basket"});
}


*************               Lesson 66: Using the debugger to check our add item code         **************
-- Add a breakpoint to the start of the application
-- Run debugger, attach to api.exe
-- Test get, should be 404 as no cookie present
-- need to add below to launch.json
"requireExactSource": false
--Enrirt framework can only get id for the basket if it has been saved into the db.
-- There is a problem, our fetch basket is generating an Internal Server Error



*************               Lesson 67: Shaping the data to be return                **************
-- There is circular referencing occuring;
-- This is because our basket points to a basketItem; which points back to the basket;
    which points to the basketItem, and so on and so forth.
-- Create a new folder DTOS; BasketDTO.cs
-- Data Transfer Object help map our entities allowing easy standardization.
-- We will return this instead of an instance of our entity
-- This is basically just creating a mapping
return new BasketDto{
    Id = basket.Id,
    BuyerId = basket.BuyerId,
    Items = basket.Items.Select(item => new BasktItemDto
    {
        ProductId = item.ProductId,
        Name = item.Product.Name,
        Price = item.Product.Price,
        PictureUrl = item.Product.PictureUrl,
        Type = item.Product.Type,
        Brand = item.Product.Brand,
        Quantity = item.Quantity
    }).ToList()
-- Fairly straigtforward stuff

*************               Lesson 68: Removing an item from the basket                **************
-- Fairly straightforward; very similar to previous one


*************               Lesson 69: Proper 201 created response               **************
-- We need to return data on the created resource, standard practices
-- Pretty straight forward, just need  to name our fetch method, then use CreatedAtRoute 
if (result) return CreatedAtRoute("GetBasket", BasketMapDto(basket));

-- Need to add some config to map CORS more (Startup.cs)
-- need to add AllowCredentials(), allowing us to pass cookies across different domains


*************               Lesson 70: axios methods for the basket                **************
-- Very simple, we just need to extend the agent.ts function with some methods linking to the Basket endpoints:
// Basket methods
const Basket = {
    get:       () => requests.get('basket'),
    addItem:   (pId: number, qty = 1) => requests.post(`basket?productId=${pId}&quantity=${qty}`, {}),
    removeItem:(pId: number, qty = 1) => requests.delete(`basket?productId=${pId}&quantity=${qty}`),
}
-- We can now use this functions in our product card to add an item to the basket
-- We will need a LoadingButton from material ui, need to install
npm i @mui/lab
                <LoadingButton size="small" onClick={()=>addItemHandler(product.id)} >Add to Card</LoadingButton>
-- For testing, remove the cookie (not port aware)
-- We also need to add cookies enabling in our agent.ts file
axios.defaults.withCredentials = true;
-- Allows browser to receive and set cookies
-- When testing two request get sent, but the first is a preflight request and is used to test api
-- We should get a 201 created response, with our data (basket, buyerId, etc)

Changes made to this file, agent.ts; ProductCard.tsx

*************               Lesson 71: Creating a basket component                **************
-- We will need an interface and a component for the basket
-- To help in making the interface; we can use the JSON object from SWAGGER
-- USE json2ts for finding interface == \models\basket.ts
-- Then create a component at \features\basketpage\BasketPage.tsx
-- Need to retrieve basket from API

-- Need to configure links; header.tsx and app.tsx

Changes made to this file; \models\basket.ts; \features\basket\BasketPage.tsx; header.tsx and app.tsx

*************               Lesson 72: Styling basket page with the mui table                **************


Changes made to this file; BasketPage.tsx;

*************               Lesson 72.5: Bugfix                **************
-- Adding item initially generates quantity of zero
-- need to change add item functionality in basket.cs

Changes made to this file;


*************               Lesson 73: Centralizing state with React context                **************
-- React context allows creating an almost local database; allowing us to store state and allow any descendent component
    to use this state
-- We need to use createContext() from react; and add an interface to it to match what we plan on storing and the actions
    we plan on implementing (basket, setbasket, removeItem)
-- We then create a custom hook to use the StoreContext easier
-- We then also create a custom provider implementing the StoreProvider; allowing easy usage
-- We can then apply our provider wherever we want (highest level)

Changes made to this file; app\context\StoreContext.tsx; Index.tsx


*************               Lesson 74: App initialization -- fetch basket                   **************
-- Attempted without tutorial
-- Startup is done in App.tsx; useEffect can be used to run sideffects on components;
-- Need to access cookie
-- Note if using a function inside context, extract it using destructuring; can allow easy dependencies.

Changes made to this file; app/util/utils.ts; Index.ts

*************               Lesson 75: Updating header with basket item count                **************
-- Attemped without tutorial
-- can replace fetch code with context in BasketPage.tsx
-- Need to also update Product card to hook up the add item to the context
-- Very simple, in our Header we read from Basket; in our Card (add function), we use setBasket to update it

Changes made to this file; Header.tsx, BasketPage.tsx; ProductCard

*************               Lesson 76: Adding the remove item functionality                **************
-- Attempted without tutorial
const { basket, removeItem } = useStoreContext();
const [loading, setLoading] = useState<boolean>(false);

const removeItemHandler = async (pId: number) => {
    setLoading(true);
    try{
        await agent.Basket.removeItem(pId);
        removeItem(pId, 1);
    }catch(e: any){
        console.log(e);
    }
    setLoading(false);
}
if(loading) return <LoadingComponent message="Removing item" />;

Changes made to this file; BasketPage.tsx

*************               Lesson 77.1: Adding specific loading indicators for buttons                **************
-- Attempted
-- Implement logic for disabling all other buttons, and specific loading logic

changes made to this file; BasketPage.tsx


*************               Lesson 77.2: Adding specific loading indicators for buttons                **************
-- Attempted

changes made to this file; BasketPage.tsx


*************               Lesson 78: Basket summary challenge                **************
*************               Lesson 79: Basket summary solution                **************
-- Very easy
-- No need for useState or useEffect; component will always re-render if basket changes. I.e. need to extract basket from context
    since the functions change often.

Changes made to this file; BasketSummary.tsx; BasketPage.tsx; utils.ts


*************               Lesson 80-81: Product details add items to cart                **************
-- Personal implementation was not so great

Changes made to this page, producTdetailsPage.tsx;  StoreContext.tsx; Basket.cs

*************               Lesson 82: Adding a checkout page                **************
-- Added checkout page shell
-- Added link to checkout page
-- We need authentication for this checkout page



*************               Lesson 80: Introduction                **************
-- Will cover redux, redux tkt, redux devtools
-- Redux has a 
    -- Store (like a local database), 
    -- a Provider (provides state, more powerful and scalable than React Context) (from react redux)
    -- Actions, that can be dispatched from inside components (think of endpoints)
    -- a Reducer to handle actions (think of API Logic)

-- Best practices
    -- Do not mutate state, create new state and replace old
    -- Reducers must not have side-effects (pure functions)
    -- Do not have non-serializable values in State or Actions
    -- Only 1 store per applications

-- Redux toolkit
    -- Opinionated
    -- Simplifies Redux code
    -- Good defaults for store setup
    -- Most commonly used Redux add-ons built in
    -- Less Boilerplate

-- Existing functionality involving state management will be transferred to Redux
-- Only major differences is the products array will be stored locally via Redux store


*************               Lesson 81: Installing and using Redux               **************
-- Need to install redux toolkit and redux

-- Contacts page to be usedd as testing ground

-- Reducer needs:
    -- state shape
    -- initial state
    -- reducer function

-- store creation done via:
    -- configureStore function
    -- needs Reducers

-- Provider component must wrap around app, pass store to it
-- useSelector hook used to used state inside components


######################## Entire section will be done manually ################################

### Products
-- Created products slice with products, productId and productsLoaded
-- replaced state logic in catalog component to manage products and loading.
-- Loading no longer re runs when moving back to Catalog page

## Product details



*************               Lesson 86. 87. 88                **************
-- Old redux needed created a reducer function, action type constants, and action creators
-- Redux toolkit encapsulates this into a createSlice() function, removing need for action type
    constants and action creators


*************               Lesson 92, 93, 94                **************
-- Goal is to move asynchronous logic from components to redux

-- The createAsyncThunk method creates some action creators in the background

*************               Lesson 98: Fetching a single product                **************
-- Need to avoid re-fetching the product everytime you navigate to product details
-- Need to be careful of the refreshing the page which will clear the state

Changes made to this file, productsSlice.ts, Catalog.tsx, producTdetailsPage


*************               Lesson 9                **************
*************               Lesson 9                **************
*************               Lesson 9                **************
*************               Lesson 9                **************
*************               Lesson 9                **************
*************               Lesson 9                **************
*************               Lesson 9                **************
*************               Lesson 9                **************