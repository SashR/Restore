*************               Lesson 61: Introduction                **************
-- We will be working on both API and Client
-- We will look at storage of the basket (client vs db)
-- Relationships in EF 
-- Shaping data being returned from the API (SELECT statement)
-- Applying React context
-- App Initialization

-- Local storage on browser is not a great option as the server is completely unaware, hence preventing
    many analytics opportunities.
-- Cookies are also an option, they are also persistent on the client, but they get sent as part of every
    request.
-- Final option is storing in the database, but here we need to update both client and server
-- We will not be tracking the individual basket changes

-- Relationships: Each (One) Basket can have (Many) Items; Each Item is a Product (One to One)
-- React Context allows avoiding extreme prop drilling. providing data easily across the depth of a tree.
-- Allows for centralizing some of our state


*************               Lesson 62: Creating the basket entity                **************
-- We are choosing the Database option. Hence we need some tables, and APIs to interact with it.
-- Create new C# class for entity under entities
-- Add properties and helper methods (Add/remove sub entities)
-- Register entity in StoreContext.cs class



*************               Lesson 63: EF Relationships                **************
-- We did not add a seperated DBSet for Basket Items, because we will never query them directly,
    only via their relationship with the Basket.
-- We need to create our migration, stop the API SERVER and execute the following command:
dotnet ef migrations add BasketEntityAdded
-- We can now find new files in our Migrations folder. We can change table names via data annotations later.
-- The migration generated might not match what we want
-- Check the ondelete behavior of the foreign contraints; Cascade or Restrict
-- Restrict will cause child entities to persist even if the parent is deleted.
-- This is not good for relationships where one entity is entirely dependent on the other existing.
-- Some fields may be nullable when they shouldn't be.
-- We should run the below command to remove this shit migration:
dotnet ef migrations remove 

-- Checkup fully defined relationships in the MS docs.
public class Blog
{
    public int BlogId { get; set; }
    public string Url { get; set; }

    public List<Post> Posts { get; set; }
}

public class Post
{
    public int PostId { get; set; }
    public string Title { get; set; }
    public string Content { get; set; }

    public int BlogId { get; set; }             // ********
    public Blog Blog { get; set; }
}
-- The child needs a fully definition i.e. identify foreign key in Parent table
// Fully definitions
public int BasketId {get; set;}
public Basket Basket {get; set; }
-- We can then use data annotations to rename the table
[Table("BasketItems")]
-- We can run our migrations command again, check the migration to make sure all is well
-- We can now restart our server to apply the migration


*************               Lesson 64: Basket Controller                **************
-- API functionality for interacting with the basket
-- initialize context
-- We need 3 endpoints, one for fetching the basket, adding to/ removing from it
-- We will use cookies to identify the basket
[HttpGet]
public async Task<ActionResult<Basket>> GetBasket()
{
    var basket = await _context.Baskets             // Fetch basket
        .Include(i => i.Items)                      // Include the items in the basket
        .ThenInclude(p => p.Product)                // map the items to products
        .FirstOrDefaultAsync(x => x.BuyerId == Request.Cookies["buyerId"]); // use cookie to find it

    if(basket == null) return NotFound();
    return basket;
}


*************               Lesson 65: Add item to basket               **************
-- We need to first fetch the basket, so we can reuse the same function a before, so we extract the method
// Endpoint for adding an item to a basket
[HttpPost] // values will be fetch from query string: api/basket?productId=32&quntity=2
public async Task<ActionResult> AddItemToBasket(int productId, int quantity)
{
    // Find basket if it exists
    var basket = await RetrieveBasket(); // return basket or null (default for any object)
    // Create basket if it doesn't
    if (basket == null) basket = CreateBasket();

    // FInd product using productId
    var product = await _context.Products.FindAsync(productId);
    if (product == null) return NotFound();          // Product does not match, just in case

    // Add item with quantity
    basket.AddItem(product, quantity);
    // Save changes
    var result = await _context.SaveChangesAsync() > 0; // detect if changes occured, commits them

    if (result) return StatusCode(201);

    return BadRequest(new ProblemDetails{Title = "Problem saving item to basket"});
}


*************               Lesson 66: Using the debugger to check our add item code         **************
-- Add a breakpoint to the start of the application
-- Run debugger, attach to api.exe
-- Test get, should be 404 as no cookie present
-- need to add below to launch.json
"requireExactSource": false
--Enrirt framework can only get id for the basket if it has been saved into the db.
-- There is a problem, our fetch basket is generating an Internal Server Error



*************               Lesson 67: Shaping the data to be return                **************
-- There is circular referencing occuring;
-- This is because our basket points to a basketItem; which points back to the basket;
    which points to the basketItem, and so on and so forth.
-- Create a new folder DTOS; BasketDTO.cs
-- Data Transfer Object help map our entities allowing easy standardization.
-- We will return this instead of an instance of our entity
-- This is basically just creating a mapping
return new BasketDto{
    Id = basket.Id,
    BuyerId = basket.BuyerId,
    Items = basket.Items.Select(item => new BasktItemDto
    {
        ProductId = item.ProductId,
        Name = item.Product.Name,
        Price = item.Product.Price,
        PictureUrl = item.Product.PictureUrl,
        Type = item.Product.Type,
        Brand = item.Product.Brand,
        Quantity = item.Quantity
    }).ToList()
-- Fairly straigtforward stuff

*************               Lesson 68: Removing an item from the basket                **************



*************               Lesson 6                **************
*************               Lesson 6                **************